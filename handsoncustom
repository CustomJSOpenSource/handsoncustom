//import { CustomScript } from '/vendor/Handsontable/handson_custom_script.js';

function CheckAllCellReadonly(BdgGroupInit, SubBdgGroupInit, CostCenter, IsAllReadOnly) {
    let IsAllCellReadOnly = false;

    if (CostCenter.includes(',')) {
        IsAllCellReadOnly = true;
    }

    if (BdgGroupInit.includes(',') || SubBdgGroupInit.includes(',') && (CostCenter == null || CostCenter == "")) {
        IsAllCellReadOnly = true;
    }

    if (IsAllCellReadOnly && IsAllReadOnly) {
        return true;
    }
    else {
        return false;
    }
}

async function GetDataForHTable(ForecastYearInit, ActualYearInit, CostCenter, BdgGrp, SubBdgGrp) {

    const response = await fetch("/ExpenseManagement/GetDataForHTable", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ FYear: ForecastYearInit, AYear: ActualYearInit, CCenter: CostCenter, BdgGrp: BdgGrp, SubBdgGrp: SubBdgGrp }),
    });

    if (response.ok) {
        const textData = await response.text();
        return textData;
    } else {
        console.error("Failed to fetch data.");
        return undefined; // or return an empty string or handle errors as needed
    }
}

function SetButtonInDIV(UniqueID, BtnHide, IsCanSave, IsCanComplete, IsCanRevise, IsCanExport, ExpenseStatus, IsObsolete, DisableButton) {

    let wrapperDiv = document.createElement('div');
    wrapperDiv.style.position = 'relative';
    //wrapperDiv.style.top = '20px';
    let collapseMainSearchDiv = document.getElementById('CollapseMainSearch');


    let closeButtonElement = document.createElement('button');
    closeButtonElement.setAttribute('class', 'btn btn-outline btn-primary btn-sm');
    closeButtonElement.setAttribute('id', 'btnClose');
    /*closeButtonElement.setAttribute('name', 'btn');*/
    closeButtonElement.setAttribute('type', 'button');
    closeButtonElement.style.position = 'absolute';
    closeButtonElement.style.display = 'none';

    let closeIconElement = document.createElement('i');
    closeIconElement.setAttribute('class', 'fas fa-close');
    closeButtonElement.appendChild(closeIconElement);
    closeButtonElement.appendChild(document.createTextNode(' Close'));

    closeButtonElement.onclick = function () {
        window.location.href = 'Main';
    };

    if (!BtnHide) {

        if (IsCanSave) {
            //*** Save Button */
            let buttonElement = document.createElement('button');
            buttonElement.setAttribute('class', 'btn btn-outline btn-primary btn-sm');
            buttonElement.setAttribute('id', 'Btnsave_' + UniqueID);
            buttonElement.setAttribute('type', 'button');
            buttonElement.setAttribute('data-original-text', 'Save HTable');
            buttonElement.style.position = 'absolute';
            buttonElement.style.top = '-25px';
            buttonElement.style.display = 'none';

            let iconElement = document.createElement('i');
            iconElement.setAttribute('class', 'fas fa-download');
            buttonElement.appendChild(iconElement);
            buttonElement.appendChild(document.createTextNode(' Save'));

            wrapperDiv.appendChild(buttonElement);
        }

        if (IsCanComplete) {
            //**** Complete Btn **/
            let buttonElementComplete = document.createElement('button');
            buttonElementComplete.setAttribute('class', 'btn btn-outline btn-primary btn-sm');
            buttonElementComplete.setAttribute('id', 'BtnComplete_' + UniqueID);
            buttonElementComplete.setAttribute('type', 'button');
            buttonElementComplete.setAttribute('data-original-text', 'Complete');
            buttonElementComplete.style.position = 'absolute';
            buttonElementComplete.style.top = '-25px';
            buttonElementComplete.style.left = '70px';
            buttonElementComplete.style.display = 'none';

            let iconElementComp = document.createElement('i');
            iconElementComp.setAttribute('class', 'fas fa-download');
            buttonElementComplete.appendChild(iconElementComp);
            buttonElementComplete.appendChild(document.createTextNode(' Complete'));

            wrapperDiv.appendChild(buttonElementComplete);
        }

        if (IsCanRevise) {
            //**** Revise Btn **/
            let buttonElementRevise = document.createElement('button');
            buttonElementRevise.setAttribute('class', 'btn btn-outline btn-primary btn-sm');
            buttonElementRevise.setAttribute('id', 'BtnRevise_' + UniqueID);
            buttonElementRevise.setAttribute('type', 'button');
            buttonElementRevise.setAttribute('data-original-text', 'Complete');
            buttonElementRevise.style.position = 'absolute';
            buttonElementRevise.style.top = '-25px';
            buttonElementRevise.style.left = '0px';
            buttonElementRevise.style.display = 'none';

            let iconElementRevise = document.createElement('i');
            iconElementRevise.setAttribute('class', 'fas fa-download');
            buttonElementRevise.appendChild(iconElementRevise);
            buttonElementRevise.appendChild(document.createTextNode(' Revise'));

            wrapperDiv.appendChild(buttonElementRevise);
        }

        if (IsObsolete) {
            //**** Revise Btn **/
            let buttonElementObsolete = document.createElement('button');
            buttonElementObsolete.setAttribute('class', 'btn btn-outline btn-primary btn-sm');
            buttonElementObsolete.setAttribute('id', 'BtnObsolete_' + UniqueID);
            buttonElementObsolete.setAttribute('type', 'button');
            buttonElementObsolete.setAttribute('data-original-text', 'Obsolete');
            buttonElementObsolete.style.position = 'absolute';
            buttonElementObsolete.style.top = '-25px';
            if (IsCanComplete) {
                buttonElementObsolete.style.left = '167px';
            }
            else if (!IsCanSave) {
                buttonElementObsolete.style.left = '78px';
            }
            else {
                buttonElementObsolete.style.left = '70px';
            }
            buttonElementObsolete.style.display = 'none';

            let iconElementObsolete = document.createElement('i');
            iconElementObsolete.setAttribute('class', 'fas fa-hourglass-end');
            buttonElementObsolete.appendChild(iconElementObsolete);
            buttonElementObsolete.appendChild(document.createTextNode(' Obsolete'));

            wrapperDiv.appendChild(buttonElementObsolete);
        }

        //*** Formula Input Text ***/
        let inputField = document.createElement("input");
        inputField.setAttribute("type", "text");
        inputField.setAttribute("class", "form-control");
        inputField.setAttribute("id", "ForFormulaFrmCell");
        inputField.style.width = '460px';
        inputField.style.position = 'absolute';
        inputField.style.top = '-25px';
        inputField.style.right = '5px';
        inputField.style.display = 'none';
        inputField.readOnly = true;

        //*** Expense Status Label ***/
        let labelElement = document.createElement('label');
        labelElement.setAttribute('class', 'badge qna-label badge-info');
        labelElement.setAttribute('id', 'ExpStatClass');
        labelElement.textContent = 'Status';
        labelElement.style.position = 'absolute';
        labelElement.style.top = '-20px';

        if (ExpenseStatus == "Completed") {
            labelElement.style.right = '487px';
        }
        else if (ExpenseStatus == "Revising") {
            labelElement.style.right = '502px';
        }
        else if (ExpenseStatus == "Obsolete") {
            labelElement.style.right = '491px';
        }
        else {
            labelElement.style.right = '515px';
        }
        
        labelElement.style.display = 'none';
        labelElement.style.fontSize = '11px';

        let labelElementTwo = document.createElement('label');
        labelElementTwo.setAttribute('class', '');
        labelElementTwo.setAttribute('id', 'ExpHeaderIDs');
        labelElementTwo.textContent = 'Expense Status:';
        labelElementTwo.style.position = 'absolute';
        labelElementTwo.style.top = '-17.5px';
        labelElementTwo.style.right = '557px';
        labelElementTwo.style.display = 'none';
        labelElementTwo.style.fontSize = '11px';

        closeButtonElement.style.top = '-25px';
        closeButtonElement.style.left = '70px';

        wrapperDiv.appendChild(closeButtonElement);
        wrapperDiv.appendChild(inputField);
        wrapperDiv.appendChild(labelElement);
        wrapperDiv.appendChild(labelElementTwo);

        if (collapseMainSearchDiv) {
            const lineBreak1 = document.createElement('br');
            const lineBreak2 = document.createElement('br');

            let parentElement = collapseMainSearchDiv.parentElement;

            parentElement.insertBefore(lineBreak1, collapseMainSearchDiv.nextSibling);
            parentElement.insertBefore(lineBreak2, collapseMainSearchDiv.nextSibling);
        }
    }
    else {

        closeButtonElement.style.top = '-25px';
        closeButtonElement.style.left = '0px';
        wrapperDiv.appendChild(closeButtonElement);

        if (collapseMainSearchDiv) {
            const lineBreak1 = document.createElement('br');
            const lineBreak2 = document.createElement('br');

            let parentElement = collapseMainSearchDiv.parentElement;

            parentElement.insertBefore(lineBreak1, collapseMainSearchDiv.nextSibling);
            parentElement.insertBefore(lineBreak2, collapseMainSearchDiv.nextSibling);
        }
    }

    let parentDiv = document.getElementById('IFrame_' + UniqueID);
    let iframeElement = parentDiv.querySelector('iframe');
    iframeElement.style.position = 'relative';
    iframeElement.style.zIndex = '0';

    if (DisableButton == "True") {
        let buttonsUnderWrapper = wrapperDiv.getElementsByTagName('button');
        for (let i = 0; i < buttonsUnderWrapper.length; i++) {
            buttonsUnderWrapper[i].disabled = true;
        }
    }
    
    parentDiv.insertBefore(wrapperDiv, iframeElement);

}

function GetFormatColumn(AYear, IsAllROnly, CostCenter) {

    return fetch("/ExpenseManagement/ActualForecastReadOnlyCheck", {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ AYear: AYear, IsAllReadOnly: IsAllROnly, CostCenter: CostCenter }),
    })
    .then(response => response.text())
    .catch(error => {
        console.error('Error:', error);
    });
}







async function InitializeHandsontableAsync(uniqueIframeValue, CostCenter, ForecastYearInit, ActualYearInit, BdgGroupInit, SubBdgGroupInit, IsAllReadOnly, ACLArry, ExpenseStatus,
    CCenterTABLE, UnitGrpTABLE, DisAbleButtonAndCellFlag)
{
    let IsAdmin = false;
    if (ACLArry.includes("Add Row")) {
        IsAdmin = true;
    }

    let IsCanComplete = false;
    if (ACLArry.includes("Complete")) {
        IsCanComplete = true;
    }

    let IsCanRevise = false;
    if (ACLArry.includes("Revise")) {
        IsCanRevise = true;
    }

    let IsCanSave = false;
    if (ACLArry.includes("Save")) {
        IsCanSave = true;
    }

    let IsCanExport = false;
    if (ACLArry.includes("Export")) {
        IsCanExport = true;
    }

    let IsObsolete = false;
    if (ACLArry.includes("Obsolete")) {
        IsObsolete = true;
    }

    const iframeHTID = `${uniqueIframeValue}`;

    SetButtonInDIV(iframeHTID, IsAllReadOnly, IsCanSave, IsCanComplete, IsCanRevise, IsCanExport, ExpenseStatus, IsObsolete, DisAbleButtonAndCellFlag);

    //**** Do here to avoid ReadAll inside SetButtonDiv*/
    //*** Cell Readonly */
    if (ExpenseStatus == "Completed" || ExpenseStatus == "Obsolete" || DisAbleButtonAndCellFlag == "True") {
        IsAllReadOnly = true;
    }

    const iframe = document.getElementById(iframeHTID);

    if (!(iframe.className == "iframeHTable")) {
        console.error("Error: The Handsontable iframe element does not have the required class name.");
        return;
    }

    iframe.style.display = "none";

    function resizeIframe() {
        //let iframe = document.getElementById(iframeHTID);
        let windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        let windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        let MPanelW;

        const parentDiv = document.getElementById("IFrame_"+iframeHTID);

        if (parentDiv) {
            const computedStyle = getComputedStyle(parentDiv);
            const widthString = computedStyle.width;
            const widthValue = parseInt(widthString, 10);
            MPanelW = widthValue;
        } else {
            MPanelW = 0;
            console.error("Handsontable iframe parent div with class 'col-md-12' and ID not found.");
            return;
        }

        //if (windowWidth > 450)
        //    MPanelW = MPanelW - 40;
        //else
        //    MPanelW = MPanelW - 30;
        if (windowWidth > 450)
            MPanelW = MPanelW - 5;
        else
            MPanelW = MPanelW + 5;

        if (windowHeight < 450)
            windowHeight = 600;
        else
            windowHeight = 600;

        iframe.style.width = MPanelW + 'px';
        iframe.style.height = windowHeight + 'px';
        iframe.scrolling = "no";
        iframe.style.border = "none";
        iframe.style.right = '8px';
        iframe.style.top = '0px';
    }

    window.addEventListener('resize', resizeIframe);

    resizeIframe();

    const RespDataIn = await GetDataForHTable(ForecastYearInit, ActualYearInit, CostCenter, BdgGroupInit, SubBdgGroupInit);

    const ColumnFormatted = await GetFormatColumn(ActualYearInit, IsAllReadOnly, CostCenter);

    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
    const cssLink = document.createElement('link');
    cssLink.href = '/vendor/Handsontable/handsontable.css';
    cssLink.rel = 'stylesheet';
    iframeDocument.head.appendChild(cssLink);

    let styleSS = document.createElement('style');
    styleSS.innerHTML = `
                
                .handsontable td {
                    font-size: 11px!important;
                    font-family: 'Calibri', sans-serif;
                }

                .handsontable th {
                    font-size: 11px!important;
                    font-family: 'Calibri', sans-serif;
                }

                .handsontable THEAD TH.color1 {
                  background: #ADD8E6;
                  border-color: #ccc;
                }

                .handsontable THEAD TH.color2 {
                  background: #90EE90;
                  border-color: #ccc;
                }

                .handsontable .collapsibleIndicator {
                    left: 3 !important;
                    top: 55% !important;
                  //box-shadow: 0px 0px 0px 6px #FF6138;
                  //-webkit-box-shadow: 0px 0px 0px 6px #FF6138;
                  //background: #FF6138;
                  //border-color: #D4441F;
                }

                //.handsontable .htCommentCell:after{
                //    border: 0;
                //}
            `;
    iframeDocument.head.appendChild(styleSS);

    const scriptElement = document.createElement('script');
    scriptElement.src = '/vendor/Handsontable/handsontable.js';
    
    scriptElement.onload = function ()
    {
        const div = document.createElement('div');
        div.id = "MainHandsonTB_" + iframeHTID;
        iframeDocument.body.appendChild(div);

        const scriptCode = `
                    
                    function getLetters(num) {
                      const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                      let result = [];

                      for (let i = 1; i <= num; i++) {
                        let currentLetter = '';
                        let quotient = Math.floor((i - 1) / 26);

                        if (quotient > 0) {
                          currentLetter += letters[quotient - 1];
                        }

                        currentLetter += letters[(i - 1) % 26];
                        result.push(currentLetter);
                      }
                      return result;
                    };

                    function isFormula(value) {
                        return typeof value === 'string' && value.charAt(0) === '=';
                    }

                    const HTBsave = window.parent.document.getElementById("Btnsave_${iframeHTID}");
                    const HTBComplete = window.parent.document.getElementById("BtnComplete_${iframeHTID}");
                    const HTBRevise = window.parent.document.getElementById("BtnRevise_${iframeHTID}");
                    const HTBObsolete = window.parent.document.getElementById("BtnObsolete_${iframeHTID}");
                    const HTBtnClose = window.parent.document.getElementById("btnClose");
                    const FormulaTextField = window.parent.document.getElementById("ForFormulaFrmCell");
                    const ExpStatusLabelID = window.parent.document.getElementById("ExpStatClass");
                    const HeaderExpStatusLabelID = window.parent.document.getElementById("ExpHeaderIDs");

                    const IsROnly = ${IsAllReadOnly};
                    if (HTBsave == null && !IsROnly) 
                    {
                        console.error('Save button element is not found.');
                    }
    
                    const mainTB = document.getElementById('MainHandsonTB_${iframeHTID}');
                    const DontDo = [0,5,10,15,20,26,31,36,41] //Remark column 
                    //const ColEndOfQMonth = [4,9,14,19,25,30,35,40] //Remark column

                    const hot = new Handsontable(mainTB, {
                        data: ${RespDataIn}.slice(1),
                        cells: function (row, col, prop) 
                        {
                            const cellProperties = {};

                            cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) 
                            {
                                Handsontable.renderers.NumericRenderer.apply(this, arguments); 

                                if (cellProperties.readOnly) {
                                    if(col == 0){
                                        td.style.backgroundColor = '#E5E4E2';
                                    }else{
                                        td.style.backgroundColor = '#E5E4E2';
                                    }
                                }

                                if(!DontDo.includes(col)) {
                                    if(value == "0" && row === 1)
                                    {
                                        const roundedValue = Math.round(0);
                                        td.innerHTML = roundedValue.toLocaleString('en');
                                    }
                                    else if (value == null || value == "") 
                                    {
                                        td.innerHTML = ""; 
                                    } else 
                                    {
                                        const roundedValue = Math.round(value);
                                        td.innerHTML = roundedValue.toLocaleString('en');
                                    }

                                }else{

                                    td.style.whiteSpace = 'nowrap';
                                    td.style.overflow = 'hidden';
                                    td.style.textOverflow = 'ellipsis';
                                    td.style.maxHeight = '20px';
                                    td.style.maxWidth = '50px';
                                }

                                if (row == 0){
                                    if(col == 0){
                                        td.style.fontWeight = 'bold';
                                    }
                                    td.style.textAlign = 'center';
                                    cellProperties.readOnly = true;
                                    td.style.fontWeight = 'bold';
                                }

                                const valuewww = instance.getDataAtCell(row, 0); 
                                if(valuewww != null && valuewww != ""){
                                    const commArryList = [17,18,19]; //Add 17,18,19 for commission ReadOnly
                                    if (valuewww.includes("7101010") || valuewww.includes("7101011") || valuewww.includes("7101012")) {
                                        if(!DontDo.includes(col))
                                        {
                                            cellProperties.readOnly = true;
                                        }

                                        if(commArryList.includes(col))
                                        {
                                            cellProperties.readOnly = false;
                                        }
                                    }
                                }

                                td.style.color = 'Black';
                            }

                            return cellProperties;
                        },
                        rowHeights: 25,
                        height: '100%',
                        rowHeaders: true,
                        colHeaders: true,
                        colHeaders: ${RespDataIn}.shift(),
                        manualColumnResize: [240],
                        stretchH: 'all',
                        contextMenu: ${IsAdmin},
                        columns: ${ColumnFormatted},
                        fixedColumnsLeft: 1,
                        nestedHeaders: [
                            [{ label: '${UnitGrpTABLE}', colspan: 1}, { label: '<b class="HeadCol1">Actual - ${ActualYearInit}</b>', colspan: 21}, { label: '<b>Forecast - ${ForecastYearInit}</b>', colspan: 21 }],
                            [
                                { label: '<b>${CCenterTABLE}</b>', colspan: 1 }, { label: 'Q1', colspan: 5 }, { label: 'Q2', colspan: 5 },
                                { label: 'Q3', colspan: 5 }, { label: 'Q4', colspan: 5 }, { label: 'YTD', colspan: 1 },

                                { label: 'Q1', colspan: 5 }, { label: 'Q2', colspan: 5 },
                                { label: 'Q3', colspan: 5 }, { label: 'Q4', colspan: 5 }, { label: 'YTD', colspan: 1 },
                            ],
                            ${RespDataIn}.shift(),
                            getLetters(59),
                        ],
                        collapsibleColumns: [
                          { row: -3, col: 0, collapsible: true },
                          { row: -3, col: 1, collapsible: true },
                          { row: -3, col: 6, collapsible: true },
                          { row: -3, col: 11, collapsible: true },
                          { row: -3, col: 16, collapsible: true },

                          { row: -3, col: 22, collapsible: true },
                          { row: -3, col: 27, collapsible: true },
                          { row: -3, col: 32, collapsible: true },
                          { row: -3, col: 37, collapsible: true },
                        ],
                        afterGetColHeader: function(col, TH) {
                            const TR = TH.parentNode;
                            const THEAD = TR.parentNode;
                            let headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                            function applyClass(elem, className) {
                                if (!elem.classList.contains(className)) {
                                    elem.classList.add(className);
                                }
                            }

                            if (headerLevel === -4) 
                            {
                                if(col == 1)
                                {
                                    applyClass(TH, 'color1');
                                }
                                else if(col == 22)
                                {
                                    applyClass(TH, 'color2');
                                }
                            }
                        },
                        beforeChange: function (changes, source) {
                            for (var i = 0; i < changes.length; i++) {
                                var change = changes[i];
                                var row = change[0];
                                var col = change[1];
                                var newValue = change[3];

                                if (!DontDo.includes(col) && !isFormula(newValue) && newValue !== null && newValue !== "") {
                                    if (isNaN(newValue) || parseFloat(newValue).toFixed(2) !== newValue) {
                                        changes[i] = [row, col, parseFloat(newValue).toFixed(2), parseFloat(newValue).toFixed(2)];
                                    }
                                }
                            }
                        },
                        formulas: {
                            engine: HyperFormula,
                        },
                        licenseKey: "non-commercial-and-evaluation"
                    });
                    
                    hot.addHook('afterCreateRow', function(index, amount) {
                      for (var row = index; row < index + amount; row++) {
                        for (var col = 0; col < hot.countCols(); col++) {
                          hot.getCellMeta(row, col).readOnly = false;
                        }
                      }
                      hot.render();
                    });

                    //****** PLUGIN HandsonTable ******

                    hot.getPlugin('collapsibleColumns').collapseAll();

                    function transformDataToObject(data) {
                        var obj = {};
                        for (var i = 0; i < data.length; i++) {
                            for (var j = 0; j < data[i].length; j++) {
                                if (!obj[i]) {
                                    obj[i] = {};
                                }
                                obj[i][j] = data[i][j];
                            }
                        }
                        return obj;
                    }

                    function getCellValue(row, col, dataObj) {
                        return dataObj[row][col];
                    }

                    function isStringCheck(variable) {
                        return typeof variable === 'string';
                    }

                    //const commentsPlugin = hot.getPlugin('comments');
                    
                    hot.addHook('afterSelection', (r, c) => {
                        
                        FormulaTextField.value = "";
                        
                        if(!(r == null || r < 0 || isNaN(r) || r === '' || c == null || c < 0 || isNaN(c) || c === '') && !(r === 0 && c === 0))
                        {
                            var AllSrcData = hot.getSourceData();
                            var dataObj = transformDataToObject(AllSrcData);
                            const FormulaVal = getCellValue(r, c, dataObj);

                            if(FormulaVal != "" && FormulaVal != null){

                                if(isStringCheck(FormulaVal) && FormulaVal.startsWith("=")){
                                    FormulaTextField.value = FormulaVal;
                                }else{
                                    const numberFinnal = parseFloat(FormulaVal);
                                    if (!isNaN(numberFinnal)){
                                        FormulaTextField.value = numberFinnal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                                    }else{
                                        FormulaTextField.value = FormulaVal;
                                    }
                                }
                            }else{
                                FormulaTextField.value = "";
                            }
                        }
                    });

                    //hot.addHook('afterColumnCollapse', function(){
                    //  console.error("Collapse");
                    //});

                    //hot.addHook('afterColumnExpand', function(){
                    //  console.error("UnCollapse");
                    //});

                    //****** PLUGIN HandsonTable ******



                    if (HTBsave) {
                        HTBsave.style.display = 'block';  
                        FormulaTextField.style.display = 'block'; 
                    }

                    if(FormulaTextField){
                        FormulaTextField.style.display = 'block';
                    }

                    if(HTBtnClose){
                        //HTBtnClose.style.display = 'block'; 
                    }

                    if(HTBComplete){
                        HTBComplete.style.display = 'block'; 
                    }

                    if(HTBRevise){
                        HTBRevise.style.display = 'block'; 
                    }

                    if(HTBObsolete){
                        HTBObsolete.style.display = 'block'; 
                    }
                    

                    if (ExpStatusLabelID) {
                        ExpStatusLabelID.textContent = "${ExpenseStatus}";
                        ExpStatusLabelID.style.display = 'block'; 
                        HeaderExpStatusLabelID.style.display = 'block'; 
                    } else {
                        console.log('Label element not found');
                    }

                    async function mockFetch() {
                        try {
                            const mockData = { message: 'This is mock data' };

                            await new Promise((resolve) => setTimeout(resolve, 10));

                            return { ok: true, json: async () => mockData };
                        } catch (error) {
                            throw new Error('Mock fetch failed');
                        }
                    }

                    function BtnSaveDisable(){
                        HTBsave.disabled = true;
                        //HTBsave.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving...'; 
                    }

                    function BtnSaveEnable() {
                        //HTBsave.innerHTML = '<i class="fas fa-download"></i> Save';
                        HTBsave.disabled = false;
                    }

                    const ValidationSweetAlert = window.parent.Swal.mixin({
                        position: 'center',
                        icon: 'warning',
                        showConfirmButton: true,
                        confirmButtonColor: '#3085d6', //default bluebootstrap button colour
                        confirmButtonText: 'Ok',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                    })


                    async function SaveOneMoreForSAVE(){
                        hot.selectCell(0, 0);
                        try
                        {
                            const response = await mockFetch();

                            if (!response.ok) {
                                throw new Error(response.status);
                            }

                            const data = await response.json();
                        }
                        catch (error) {
                            //console.error('Fetch error:', error);
                        }

                        const data1 = hot.getData(); //Return Value
                        const data2 = hot.getSourceData(); //Return Formula
                        const data3 = [["${CostCenter}", ${ActualYearInit}, ${ForecastYearInit}]];
                        const combinedData = {
                            dVal: data1,
                            dForm: data2,
                            dAdd: data3,
                        };

                        const response = await fetch("/ExpenseManagement/PassHandsonTableData", {
                            method: 'POST',
                            mode: 'cors', 
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(combinedData)
                        });

                        const data = await response.json();
                        if(data){
                            if(data.message != "Data saved successfully"){
                                throw new Error(data.message);
                            }
                        }
                    }



                    //************ Button Submission ********************

                    if(HTBObsolete){

                        HTBObsolete.disable = true;

                        HTBObsolete.addEventListener('click', async () =>
                        {
                            try
                            {
                                const response = await mockFetch();

                                if (!response.ok) {
                                    throw new Error(response.status);
                                }

                                const data = await response.json();
                            }
                            catch (error) {
                                //console.error('Fetch error:', error);
                            }

                            try
                            {
                                //await SaveOneMoreForSAVE();

                                const response = await fetch("/ExpenseManagement/ExpenseObsolete", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({ CCenter: "${CostCenter}", CurrentStatus: "${ExpenseStatus}", FYear: "${ForecastYearInit}" }),
                                });

                                const data = await response.json();
                                if(data){
                                    if(data.message != "Data obsolete successfully"){
                                        throw new Error(data.message);
                                    }
                                }

                                HTBObsolete.disable = false;
                                await ValidationSweetAlert.fire({ text: data.message });
                                window.parent.location.reload();
                            }
                            catch (error) {
                                HTBObsolete.disable = false;
                                await ValidationSweetAlert.fire({ text: error.message });
                            }
                        });
                    }

                    if(HTBComplete){

                        HTBComplete.disable = true;

                        HTBComplete.addEventListener('click', async () =>
                        {
                            try
                            {
                                const response = await mockFetch();

                                if (!response.ok) {
                                    throw new Error(response.status);
                                }

                                const data = await response.json();
                            }
                            catch (error) {
                                //console.error('Fetch error:', error);
                            }

                            try
                            {
                                await SaveOneMoreForSAVE();

                                const response = await fetch("/ExpenseManagement/ExpenseComplete", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({ CCenter: "${CostCenter}", CurrentStatus: "${ExpenseStatus}", FYear: "${ForecastYearInit}" }),
                                });

                                const data = await response.json();
                                if(data){
                                    if(data.message != "Data complete successfully"){
                                        throw new Error(data.message);
                                    }
                                }

                                HTBComplete.disable = false;
                                await ValidationSweetAlert.fire({ text: data.message });
                                window.parent.location.reload();
                            }
                            catch (error) {
                                HTBComplete.disable = false;
                                await ValidationSweetAlert.fire({ text: error.message });
                            }
                        });
                    }

                    if(HTBRevise){

                        HTBRevise.disable = true;

                        HTBRevise.addEventListener('click', async () =>
                        {
                            try
                            {
                                const response = await mockFetch();

                                if (!response.ok) {
                                    throw new Error(response.status);
                                }

                                const data = await response.json();
                            }
                            catch (error) {
                                //console.error('Fetch error:', error);
                            }

                            try
                            {
                                const response = await fetch("/ExpenseManagement/ExpenseRevise", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify({ CCenter: "${CostCenter}", CurrentStatus: "${ExpenseStatus}", FYear: "${ForecastYearInit}" }),
                                });

                                const data = await response.json();
                                if(data){
                                    if(data.message != "Data revise successfully"){
                                        throw new Error(data.message);
                                    }
                                }

                                HTBRevise.disable = false;
                                await ValidationSweetAlert.fire({ text: data.message });
                                window.parent.location.reload();
                            }
                            catch (error) {
                                HTBRevise.disable = false;
                                await ValidationSweetAlert.fire({ text: error.message });
                            }
                        });
                    }

                    if(HTBsave){
                        HTBsave.addEventListener('click', async () =>
                        {
                            BtnSaveDisable();
                            hot.selectCell(0, 0);

                            try
                            {
                                const response = await mockFetch();

                                if (!response.ok) {
                                    throw new Error(response.status);
                                }

                                const data = await response.json();
                            }
                            catch (error) {
                                //console.error('Fetch error:', error);
                            }

                            const data1 = hot.getData(); //Return Value
                            const data2 = hot.getSourceData(); //Return Formula
                            const data3 = [["${CostCenter}", ${ActualYearInit}, ${ForecastYearInit}]];
                            const combinedData = {
                                dVal: data1,
                                dForm: data2,
                                dAdd: data3,
                            };

                            try
                            {
                                const response = await fetch("/ExpenseManagement/PassHandsonTableData", {
                                    method: 'POST',
                                    mode: 'cors', 
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(combinedData)
                                });

                                const data = await response.json();
                                if(data){
                                    if(data.message != "Data saved successfully"){
                                        throw new Error(data.message);
                                    }
                                }

                                BtnSaveEnable();
                                await ValidationSweetAlert.fire({ text: data.message });
                                window.parent.location.reload();
                            } 
                            catch (error) {
                                BtnSaveEnable();
                                await ValidationSweetAlert.fire({ text: error.message });
                            }
                        });
                    }
                `;

        const scriptCodeElement = iframeDocument.createElement('script');
        scriptCodeElement.textContent = scriptCode;
        
        iframeDocument.body.appendChild(scriptCodeElement);
    };

    iframeDocument.body.appendChild(scriptElement);
    iframe.style.display = "block";
}

